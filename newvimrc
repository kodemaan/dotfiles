set tabstop=2
set shiftwidth=2
set expandtab
set number
set noswapfile
set backupcopy=yes
set ignorecase
set hlsearch
set smartindent
set undodir=~/.vim/.cache/undo_dir/
set wrap
set linebreak
set nolist
set incsearch
set undofile
set copyindent
set smartcase
set mouse=a
set colorcolumn=120
set nocursorline
set hidden
set signcolumn=auto
set wildmenu
set lazyredraw
set list
set relativenumber
set timeoutlen=400
set cmdheight=1
set nofixendofline
set updatetime=300
set updatetime=300
set shortmess+=c
set tags=tags
let &listchars = "tab:~>,space:·,extends:>,precedes:<,eol:\u00ac,trail:\u00b7"
" Use clipboard for yanking and pasting from
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set t_Co=256
if has("clipboard")
  set clipboard=unnamed " copy to the system clipboard

let g:gruvbox_contrast_dark = 'hard'
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif
let g:gruvbox_invert_selection='0'
au! VimEnter COMMIT_EDITMSG exec 'norm gg' | startinsert!
let b:coc_root_patterns = ['.git', '.env']
  if has("unnamedplus")" " X11 support
    set clipboard+=unnamedplus
  endif
endif
" ================ MAPPINGS =====================
command! Bd :up | %bd | e#
nnoremap <Space> <Nop>
let g:mapleader = "\<Space>"
let g:maplocalleader = ','
nnoremap <silent> <leader>      :WhichKey '<Space>'<CR>
nnoremap <silent> <localleader> :WhichKey  ','<CR>
vnoremap <silent> <leader>      :WhichKeyVisual '<Space>'<CR>
vnoremap <localleader> :<c-u>WhichKeyVisual  ','<CR>
nnoremap <leader>ht :HardTimeToggle<CR>
nnoremap <leader>dl :r ~/diary/diary/template.md<CR>
nnoremap <leader>wk :wincmd k<CR>
nnoremap <leader>wj :wincmd j<CR>
nnoremap <leader>tp :call CocAction('runCommand', 'jest.projectTest')<CR>
nnoremap <leader>tc :call CocAction('runCommand', 'jest.fileTest', ['%'])<CR>
nnoremap <leader>te :call CocAction('runCommand', 'jest.singleTest')<CR>
nnoremap <leader>wh :wincmd h<CR>
nnoremap <leader>wl :wincmd l<CR>
nnoremap <leader>w- :split<CR>
nnoremap <leader>w\ :vsplit<CR>
nnoremap <leader>q :q<CR>

nnoremap <leader>ml :set list!<CR>
nnoremap <leader>mc :CalendarH<CR>
" H moves to first nonblank character
nnoremap H ^
vnoremap H ^
" L moves to last nonblank character
nnoremap L g_
vnoremap L g_
" J moves down 5 lines 
nnoremap J 5j
vnoremap J 5j
" K moves up 5 lines 
nnoremap K 5k
vnoremap K 5k
" Get back J mapping
nnoremap <leader>j J
nnoremap <leader>K K
vnoremap <leader>j J
vnoremap <leader>K K
nnoremap gdh :diffget //2<CR>
nnoremap gdl :diffget //3<CR>
command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, {'options': '--delimiter : --nth 4..'}, <bang>0)
let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.8 } }
let $FZF_DEFAULT_OPTS='--reverse'

" git 
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gp :Git pushd<CR>
nnoremap <leader>gd :Gvdiffsplit!<CR>
nnoremap <leader>gc :Gcommit<CR>
" git gutter
nnoremap <leader>ggs :GitGutterStageHunk<CR>
nnoremap <leader>ggt :GitGutterToggle<CR>

" vim source files
nnoremap <leader>vs :so $MYVIMRC<CR>
nnoremap <leader>vf :tabe $MYVIMRC<CR>

nnoremap <leader>cc :Commands<CR>
nnoremap <leader>ca :CocAction<CR>
nnoremap <leader>cf :CocCommand eslint.executeAutofix<CR>
nnoremap <leader>cn :CocNext<CR>
nnoremap <leader>cd :CocList diagnostics<CR>

" Misc commands
nnoremap <leader>f :Ag<CR>
nnoremap <leader>s :GFiles<CR>
nnoremap <leader>r :Ranger<CR>
nnoremap <leader>l :Buffer<CR>
nnoremap <leader>/ :BLines<CR>

let g:ranger_map_keys = 0
" nnoremap <expr> <Leader>s (FugitiveHead() != '' ? ':GFiles<cr>' : ':Files<cr>')
" nnoremap <Leader>gs :Gstatus<CR>

" Git Gutter
" nnoremap <Leader>gt :GitGutterToggle<CR>
" nnoremap <Leader>gn <Plug>(GitGutterNextHunk)
" nnoremap <Leader>gp <Plug>(GitGutterPreviousHunk)

" Fzf
" nnoremap <Leader>fp :Ag<CR>
" nnoremap <Leader>l :Buffers<CR>
" nnoremap <Leader>/ :Lines<CR>

" Misc
nnoremap <c-s> :w<CR>
inoremap <c-s> <Esc><c-s>a
nnoremap <Leader>tt :VimwikiToggleListItem<CR>
let g:vrc_output_buffer_name = '__VRC_OUTPUT.json'
let g:vrc_response_default_content_type = 'application/json'
" nnoremap <Leader>vs :source ~/.config/nvim/init.vim<CR>

" coc.nvim
nnoremap <Leader>md :MarkdownPreview

" ================ END ==========================

call plug#begin()
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-gitgutter'
Plug 'diepm/vim-rest-console'
Plug 'easymotion/vim-easymotion'
Plug 'jxnblk/vim-mdx-js'
Plug 'wakatime/vim-wakatime'
Plug 'francoiscabrol/ranger.vim'
Plug 'gruvbox-community/gruvbox'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install' }
Plug 'itchyny/lightline.vim'
Plug 'justinmk/vim-sneak'
Plug 'ekalinin/Dockerfile.vim'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'flazz/vim-colorschemes'
Plug 'liuchengxu/vim-which-key'
Plug 'mattn/calendar-vim'
Plug 'mattn/emmet-vim'
Plug 'nelsyeung/twig.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'pangloss/vim-javascript'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'preservim/nerdcommenter'
Plug 'reedes/vim-thematic'
Plug 'takac/vim-hardtime'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'vimwiki/vimwiki', {'branch': 'dev'}
Plug 'wellle/targets.vim'
call plug#end()

setlocal conceallevel=2
let g:hardtime_default_on = 0
let g:hardtime_maxcount = 2
let g:hardtime_allow_different_key = 1
let g:vimwiki_list = [
  \{
  \  'path': '~/diary',
  \  'syntax': 'markdown',
  \  'ext': '.md'
  \},
  \{
  \   'path': '~/mynotes/',
  \   'syntax': 'markdown',
  \   'ext': '.md'
  \}
\] 
" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
let g:vrc_set_default_mapping=1
let g:vimwiki_ext2syntax = {'.md': 'markdown'}
let g:vimwiki_markdown_link_ext=1

let g:which_key_space_map = {}
call which_key#register('<Space>', "g:which_key_space_map")
let g:which_key_display_names = {'<CR>': '↵', '<TAB>': '⇆'}
nnoremap <Leader>wb :set bt= <bar> :w! /tmp/temp.html <bar> :exe ':silent !open -a /Applications/Firefox.app /tmp/temp.html'<CR>
command! -nargs=0 Tsc                                  :call     CocAction('runCommand', 'tsserver.watchBuild')


let g:lightline = {
  \ 'active': {
  \  'left': [ [ 'mode', 'paste' ],
  \            [ 'gitbranch', 'readonly', 'filename', 'modified'] ]
  \ },
  \ 'component_function': {
  \  'gitbranch': 'FugitiveHead'
  \ }
  \}
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
set termguicolors
colorscheme gruvbox
set background=dark
let g:sneak#label = 1
