
"
set tabstop=2
set shiftwidth=2
set expandtab
set number
set nobackup
set noswapfile
set nowritebackup
set ignorecase
set hlsearch
set smartindent
set undodir=~/.vim/.cache/undo_dir/
set wrap
set linebreak
set nolist
set incsearch
set undofile
set copyindent
set smartcase
set mouse=a
set colorcolumn=120
set nocursorline
set hidden
set signcolumn=auto
set wildmenu
set lazyredraw
set list
set relativenumber
set timeoutlen=500
set cmdheight=1
set updatetime=300
set shortmess+=c
set tags=tags
let &listchars = "tab:~>,space:â€¢,extends:>,precedes:<,eol:\u00ac,trail:\u00b7"
let mapleader = " "
" Use clipboard for yanking and pasting from
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set background=dark
set t_Co=256
if has("clipboard")
  set clipboard=unnamed " copy to the system clipboard

au! VimEnter COMMIT_EDITMSG exec 'norm gg' | startinsert!
let b:coc_root_patterns = ['.git', '.env']
  if has("unnamedplus")" " X11 support
    set clipboard+=unnamedplus
  endif
endif
" ================ MAPPINGS =====================
command Bd :up | %bd | e#
nnoremap <Space> <Nop>
let mapleader = "\<Space>"
nnoremap <silent> <leader> :call leaderMapper#start() "<Space>"<CR>
vnoremap <silent> <leader> :call leaderMapper#start() "<Space>"<CR>
nnoremap <leader>ht :HardTimeToggle<CR>
nnoremap <leader>dl :r ~/diary/diary/template.md<CR>
nnoremap <leader>wk :wincmd k<CR>
nnoremap <leader>wj :wincmd j<CR>
nnoremap <leader>wh :wincmd h<CR>
nnoremap <leader>wl :wincmd l<CR>
nnoremap <leader>w- :split<CR>
nnoremap <leader>w\ :vsplit<CR>
nnoremap <leader>q :q<CR>
" H moves to first nonblank character
nnoremap H ^
vnoremap H ^
" L moves to last nonblank character
nnoremap L g_
vnoremap L g_
" J moves down 5 lines 
nnoremap J 5j
vnoremap J 5j
" K moves up 5 lines 
nnoremap K 5k
vnoremap K 5k
" Get back J mapping
nnoremap <leader>j J
nnoremap <leader>K K
vnoremap <leader>j J
vnoremap <leader>K K
nnoremap gdh :diffget //2<CR>
nnoremap gdl :diffget //3<CR>
command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, {'options': '--delimiter : --nth 4..'}, <bang>0)

" vim fugitive
let gitGutter = {'name': 'Gutter',
             \'s': [":GitGutterStageHunk", "Stage Hunk"],
             \'t': [":GitGutterToggle", "Toggle Gutter"],
             \}
let gitMenu = {'name': "Git",
             \'s': [":Gstatus", "Status"],
             \'p': [":Git pushd", "Push changes"],
             \'d': [":Gvdiffsplit!", "Diff Split"],
             \'c': [":Gcommit", "Commit Changes"],
             \'g': [gitGutter, "Toggle Gutter"],
             \}
let vimMenu = {'name': "Vimrc",
             \'s': [":so $MYVIMRC", "Source"],
             \'f': [":tabe $MYVIMRC", "Open"],
             \}
let cocNvim = {'name': "Coc.nvim",
             \'c': [":Commands", "Command"],
             \'a': [":CocAction", "Action for fix"],
             \'f': [":CocCommand eslint.executeAutofix", "autofix all"],
             \'n': [":CocNext", "Next error"],
             \'d': [":CocList diagnostics", "Diagnostics"],
             \}
let vimWiki = {'name': 'Vimwiki',
             \'w': [":VimwikiIndex",           "Main Index"],
             \'s': [":VimwikiUISelect",        "Select wiki"],
             \'i': [":VimwikiDiaryIndex",      "Diary"]
             \}
let g:leaderMenu = {"name":  "",
             \'f': [":Ag", "files by string"],
             \'s': [":GFiles", "files by name"],
             \'g': [gitMenu,                        "Git"],
             \'c': [cocNvim,                        "Coc.nvim"],
             \'v': [vimMenu,                        "Edit vimrc"],
             \'r': [":Ranger",                      "Ranger file manager"],
             \'l': [":Buffer",                      "List opened buffers"],
             \'/': [":BLines",                       "Search lines in open buffer"],
             \'w': [vimWiki,                        "Vimwiki"]
             \}
let g:ranger_map_keys = 0
" nnoremap <expr> <Leader>s (FugitiveHead() != '' ? ':GFiles<cr>' : ':Files<cr>')
" nnoremap <Leader>gs :Gstatus<CR>

" Git Gutter
" nnoremap <Leader>gt :GitGutterToggle<CR>
" nnoremap <Leader>gn <Plug>(GitGutterNextHunk)
" nnoremap <Leader>gp <Plug>(GitGutterPreviousHunk)

" Fzf
" nnoremap <Leader>fp :Ag<CR>
" nnoremap <Leader>l :Buffers<CR>
" nnoremap <Leader>/ :Lines<CR>

" Misc
nnoremap <c-s> :w<CR>
imap <c-s> <Esc><c-s>a
nnoremap <Leader>tt :VimwikiToggleListItem<CR>
let g:vrc_output_buffer_name = '__VRC_OUTPUT.json'
let g:vrc_trigger = '<CR>'
" let g:vrc_auto_format_response_patterns = {
"   \ 'json': 'jq'
"   \}
" let g:vrc_show_command = 1
" let g:vrc_debug = 1
let g:vrc_response_default_content_type = 'application/json'
" nnoremap <Leader>vs :source ~/.config/nvim/init.vim<CR>

" coc.nvim
" nnoremap <Leader>cf :CocCommand eslint.executeAutofix<CR>
nnoremap <Leader>md :MarkdownPreview

" ================ END ==========================

call plug#begin()
Plug 'easymotion/vim-easymotion'
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
Plug 'morhetz/gruvbox'
Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-fugitive'
Plug 'francoiscabrol/ranger.vim'
Plug 'preservim/nerdcommenter'
Plug 'airblade/vim-gitgutter'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'damofthemoon/vim-leader-mapper'
Plug 'vimwiki/vimwiki', {'branch': 'dev'}
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install' }
Plug 'reedes/vim-thematic'
Plug 'yorickpeterse/happy_hacking.vim'
Plug 'mattn/calendar-vim'
Plug 'tpope/vim-unimpaired'
Plug 'diepm/vim-rest-console'
Plug 'pangloss/vim-javascript'
Plug 'junegunn/goyo.vim'
Plug 'chuling/vim-equinusocio-material'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'nelsyeung/twig.vim'
Plug 'takac/vim-hardtime'
Plug 'wellle/targets.vim'
Plug 'justinmk/vim-sneak'
call plug#end()

let g:goyo_width = 120
let g:goyo_linenr = 1
let g:hardtime_default_on = 0
let g:hardtime_maxcount = 2
let g:hardtime_allow_different_key = 1
let g:vimwiki_list = [
  \{
  \  'path': '~/diary',
  \  'syntax': 'markdown',
  \  'ext': '.md'
  \},
  \{
  \   'path': '~/mynotes/',
  \   'syntax': 'markdown',
  \   'ext': '.md'
  \}
\] 
let g:vimwiki_ext2syntax = {'.md': 'markdown'}
let g:vimwiki_markdown_link_ext=1

nnoremap <Leader>wb :set bt= <bar> :w! /tmp/temp.html <bar> :exe ':silent !open -a /Applications/Firefox.app /tmp/temp.html'<CR>

let g:lightline = {
  \ 'colorscheme': 'equinusocio_material',
  \ 'active': {
  \  'left': [ [ 'mode', 'paste' ],
  \            [ 'gitbranch', 'readonly', 'filename', 'modified'] ]
  \ },
  \ 'component_function': {
  \  'gitbranch': 'FugitiveHead'
  \ }
  \}
set termguicolors
let g:gruvbox_contrast_dark='hard'
highlight Normal ctermbg=none
highlight NonText ctermbg=none
au ColorScheme * hi Normal ctermbg=none guibg=none
au ColorScheme myspecialcolors hi Normal ctermbg=red guibg=red
colorscheme gruvbox
let g:sneak#label = 1
